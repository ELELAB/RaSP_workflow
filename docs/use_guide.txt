###THIS FILE CONTAINS THE FOLLOWING SECTIONS: 

# Activate envrionment
# running 
# flags (for running) 
# Examples of runs
# Understanding the output

########### ACTIVATE ENVIRONMENT ###############
#see installation_guide.txt to set up environment.
#Bioinfo01
module load conda/4.9.2/modulefile
conda activate rasp

#Bioinfo03 and 04
/usr/local/miniconda3/bin/conda
conda activate rasp

########### RUNNING ##############
python run_RaSP.py [flags]

########## FLAGS ##################
# -i [INPUT FILE]

#There are three modes of running RaSP:
#	1) with a uniprot id to download the AlphaFold model
#	2) with a PDB id to download a PDB model
#	3) with a file name to run RaSP on an existing PDB file.

#This is defined using the flag [-i] input pdb
# ex.  -i P62942 for the alphafold model
# ex.  -i 2XWR for the pdb model
# ex.  -i 2PPN.pdb for an existing structure. 

# -c [CHAIN NAME]

# RaSP can only take one chain at a time as input. The chain name 
# should be defined using -c chain. 

# ex. -c A
# ex. -c B

# -v [ALPHAFOLD VERSION] 

# When an AlphaFold model is downloaded the version can be defined 
# using the -v version flag. This is optional. Per default version 4. 

# -r [RUNTYPE]

# RaSP have two runtypes, cpu and cuda. Cuda is a gpu type. 
# When running on bioinfo01 always use cpu or leave the flag
# out since the default is cpu. When running on bioinfo03 or 04 
# use cuda, since this will speed up the process. 

############ EXAMPLES #######################

#ALPHAFOLD MODELS
tsp -N 1 python run_RaSP.py -i P62942 -c A -v 4 -r cpu

#or since this specify default settings: 

tsp -N 1 python run_RaSP.py -i P62942 -c A

#Alternatively on bioinfo03 or 04

tsp -N 1 python run_RaSP.py -i P62942 -c A -r cuda

#PDB ID

tsp -N 1 python run_RaSP.py -i 2XWR -c B -r cuda

#EXISTING PDB

tsp -N 1 python run_RaSP -i trimmed_ulk1.pdb -c A -r cuda

########## UNDERSTANDING THE OUTPUT ################

#After a successfull run, the output files are deposited: 

output/predictions/

#and named based on the input code. If you used a pre-existing pdb
#the name will be CUSTOM, and you may wish to rename the file. 

#using the first example run with P62942 as an output example,
#the output files are: 

output/predictions/cavity_pred_P62942_A.csv  
output/predictions/prism_cavity_P62942_A.txt 

#To see the esitmated ddG, we examine the csv file: 
pdbid,chainid,variant,wt_idx,mt_idx,wt_nlf,mt_nlf,score_ml_fermi,score_ml,pos,wt_AA,mt_AA,wt
P62942,A,M1A,10,0,3.785956884138847,2.4839824262174384,0.2559438,0.33210336415230135,1,M,A,M
P62942,A,M1C,10,1,3.785956884138847,4.335140045203785,0.29353338,0.8042885819152235,1,M,C,M
P62942,A,M1D,10,2,3.785956884138847,2.8246796259135976,0.22557239,-0.08370761983215846,1,M,D,M
P62942,A,M1E,10,3,3.785956884138847,2.712832422359037,0.24662709,0.2082927845099386,1,M,E,M
P62942,A,M1F,10,4,3.785956884138847,3.2079371983380796,0.25724873,0.34920552719755193,1,M,F,M
P62942,A,M1G,10,5,3.785956884138847,2.5602131485714543,0.27896655,0.6260158311485233,1,M,G,M
P62942,A,M1H,10,6,3.785956884138847,3.772712370515455,0.23301259,0.02155520521038179,1,M,H,M

#This file contains much more information than we need. The mutation is available in 
#the variant column and the esitmated ddG is available in the score_ml column. 

#To post process this file and convert to mutatex and rosetta compatible formatting you 
#can use: 

#python postprocess_RaSP.py -i cavity_pred_{identifier}_{chain}.csv

#e.g.:

python postprocess_RaSP.py -i output/predictions/cavity_pred_P62942_A.csv

